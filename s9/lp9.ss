#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the PLT Scheme editor format.
   Open this file in DrScheme version 4.2.1 or later to read it.

   Most likely, it was created by saving a program in DrScheme,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://www.plt-scheme.org
|#
 29 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wxmedia\0"
4 1 8 #"wximage\0"
2 0 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 56
#"(lib \"hrule-snip.ss\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 18 #"java-comment-box%\0"
1 0 23 #"java-interactions-box%\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
          0 0 76 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drscheme:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drscheme:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 41
#"profj:syntax-colors:scheme:block-comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
35 #"profj:syntax-colors:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 139 0 0 0 -1 -1 2 37
#"profj:syntax-colors:scheme:prim-type\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 139 0 0 0 -1 -1 2 38
#"profj:syntax-colors:scheme:identifier\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 34
#"profj:syntax-colors:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:literal\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
33 #"profj:syntax-colors:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:default\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 37
#"profj:syntax-colors:scheme:uncovered\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:covered\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 139 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 8 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 8 24
#"drscheme:text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 2 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 22 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 15 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 14 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 20 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 22 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 14 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 20 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 17 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
22 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 17 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 17 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 15 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 19 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 19 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
          0 977 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrScheme. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 244
(
 #"#reader(lib \"htdp-advanced-reader.ss\" \"lang\")((modname lp9) (rea"
 #"d-case-sensitive #t) (teachpacks ((lib \"hangman.ss\" \"teachpack\" "
 #"\"htdp\"))) (htdp-settings #(#t constructor repeating-decimal #t #t "
 #"none #f ((lib \"hangman.ss\" \"teachpack\" \"htdp\")))))"
) 0 0 4 29 1 #"\n"
0 0 17 3 16 #";; problem set 9"
0 0 65 29 1 #"\n"
0 0 17 3 16 #";; Lain Carvalho"
0 0 65 29 1 #"\n"
0 7         679 65           0 0           0 112 0 14 3 7 #"Develop"
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 8 #"function"
0 0 2 3 1 #" "
0 0 14 3 8 #"between?"
0 0 26 3 1 #","
0 0 2 3 1 #" "
0 0 14 3 5 #"which"
0 0 2 3 1 #" "
0 0 14 3 8 #"consumes"
0 0 2 3 1 #" "
0 0 14 3 5 #"three"
0 0 2 3 1 #" "
0 0 14 3 7 #"numbers"
0 0 2 3 1 #" "
0 0 14 3 3 #"and"
0 0 2 3 1 #" "
0 0 14 3 8 #"produces"
0 0 2 3 1 #" "
0 0 14 3 4 #"true"
0 0 2 3 1 #" "
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 4 #"last"
0 0 2 3 1 #" "
0 0 14 3 2 #"is"
0 0 2 3 1 #" "
0 0 14 3 7 #"between"
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 5 #"first"
0 0 2 3 1 #" "
0 0 14 3 3 #"two"
0 0 26 3 1 #","
0 0 2 3 1 #" "
0 0 14 3 9 #"otherwise"
0 0 2 3 1 #" "
0 0 14 3 2 #"it"
0 0 2 3 1 #" "
0 0 14 3 7 #"returns"
0 0 2 3 1 #" "
0 0 14 3 6 #"false."
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 14 3 3 #"Use"
0 0 2 3 1 #" "
0 0 14 3 8 #"between?"
0 0 2 3 1 #" "
0 0 14 3 2 #"to"
0 0 2 3 1 #" "
0 0 14 3 7 #"develop"
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 8 #"function"
0 0 2 3 1 #" "
0 0 14 3 14 #"three-between?"
0 0 26 3 1 #","
0 0 2 3 1 #" "
0 0 14 3 5 #"which"
0 0 2 3 1 #" "
0 0 14 3 8 #"consumes"
0 0 2 3 1 #" "
0 0 14 3 3 #"two"
0 0 2 3 1 #" "
0 0 14 3 7 #"numbers"
0 0 2 3 1 #" "
0 0 14 3 3 #"and"
0 0 2 3 1 #" "
0 0 14 3 1 #"a"
0 0 2 3 1 #" "
0 0 14 3 4 #"list"
0 0 2 3 1 #" "
0 0 14 3 2 #"of"
0 0 2 3 1 #" "
0 0 14 3 5 #"three"
0 0 2 3 1 #" "
0 0 14 3 7 #"numbers"
0 0 2 3 1 #" "
0 0 14 3 3 #"and"
0 0 2 3 1 #" "
0 0 14 3 10 #"determines"
0 0 2 3 1 #" "
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 14 3 3 #"all"
0 0 2 3 1 #" "
0 0 14 3 5 #"three"
0 0 2 3 1 #" "
0 0 14 3 7 #"numbers"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 14 3 4 #"list"
0 0 2 3 1 #" "
0 0 14 3 3 #"are"
0 0 2 3 1 #" "
0 0 14 3 7 #"between"
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 5 #"first"
0 0 2 3 1 #" "
0 0 14 3 4 #"two."
0           0 0 0 65 29 1 #"\n"
0 0 65 29 1 #"\n"
0 0 17 3 4 #";;;;"
0 0 65 29 1 #"\n"
0 0 17 3 15 #";;;; Problem 2 "
0 0 65 29 1 #"\n"
0 0 17 3 4 #";;;;"
0 0 65 29 1 #"\n"
0 0 65 29 1 #"\n"
0 0 17 3 45 #";; between? : number number number -> boolean"
0 0 65 29 1 #"\n"
0 0 17 3 57 #";; true if 3rd number is between 1st and 2nd, else false."
0 0 65 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"between?"
0 0 65 3 1 #" "
0 0 14 3 1 #"a"
0 0 65 3 1 #" "
0 0 14 3 1 #"b"
0 0 65 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 65 29 1 #"\n"
0 0 65 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"let*"
0 0 65 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 3 #"min"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 65 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 1 #"<"
0 0 65 3 1 #" "
0 0 14 3 1 #"a"
0 0 65 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 1 #")"
0 0 65 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #"]"
0 0 65 3 1 #" "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 65 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 3 #"])]"
0 0 65 29 1 #"\n"
0 0 65 3 9 #"         "
0 0 22 3 1 #"["
0 0 14 3 3 #"max"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 65 3 1 #" "
0 0 14 3 1 #"a"
0 0 65 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 1 #")"
0 0 65 3 1 #" "
0 0 14 3 3 #"min"
0 0 22 3 3 #")])"
0 0 65 29 1 #"\n"
0 0 65 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #">="
0 0 65 3 1 #" "
0 0 14 3 1 #"x"
0 0 65 3 1 #" "
0 0 14 3 3 #"min"
0 0 22 3 1 #")"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"<="
0 0 65 3 1 #" "
0 0 14 3 1 #"x"
0 0 65 3 1 #" "
0 0 14 3 3 #"max"
0 0 22 3 4 #"))))"
0 0 65 29 1 #"\n"
0 0 65 29 1 #"\n"
0 0 17 3 8 #";; tests"
0 0 65 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"between?"
0 0 65 3 1 #" "
0 0 20 3 1 #"5"
0 0 65 3 1 #" "
0 0 20 3 1 #"3"
0 0 65 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #")"
0 0 65 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"between?"
0 0 65 3 1 #" "
0 0 20 3 1 #"3"
0 0 65 3 1 #" "
0 0 20 3 1 #"5"
0 0 65 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 2 #"))"
0 0 65 29 1 #"\n"
0 0 65 29 1 #"\n"
0 0 17 3 47 #";; three-between? number number list -> boolean"
0 0 65 29 1 #"\n"
0 0 17 3 59
#";; true if all elements of the list are between the numbers"
0 0 65 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 64 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"three-between?"
0 0 64 3 1 #" "
0 0 14 3 1 #"a"
0 0 64 3 1 #" "
0 0 14 3 1 #"b"
0 0 64 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 65 29 1 #"\n"
0 0 65 3 1 #" "
0 0 64 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldl"
0 0 64 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 65 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 65 3 1 #" "
0 0 14 3 1 #"x"
0 0 65 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 2 #"))"
0 0 64 3 1 #" "
0 0 14 3 4 #"true"
0 0 65 29 1 #"\n"
0 0 65 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"between?"
0 0 65 3 1 #" "
0 0 14 3 1 #"a"
0 0 65 3 1 #" "
0 0 14 3 1 #"b"
0 0 65 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 2 #"))"
0 0 65 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 3 #")))"
0 0 65 29 1 #"\n"
0 0 65 29 1 #"\n"
0 0 17 3 28 #";; tests for three-between?:"
0 0 65 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 14 #"three-between?"
0 0 65 3 1 #" "
0 0 20 3 1 #"3"
0 0 65 3 1 #" "
0 0 20 3 1 #"6"
0 0 65 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 1 #"5"
0 0 65 3 1 #" "
0 0 20 3 1 #"4"
0 0 65 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 2 #"))"
0 0 65 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"three-between?"
0 0 65 3 1 #" "
0 0 20 3 1 #"3"
0 0 65 3 1 #" "
0 0 20 3 1 #"6"
0 0 65 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 1 #"5"
0 0 65 3 1 #" "
0 0 20 3 2 #"43"
0 0 65 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 3 #")))"
0 0 65 29 1 #"\n"
0 0 65 29 1 #"\n"
0 0 17 3 51 #";; three-between?_r : number number list -> boolean"
0 0 65 29 1 #"\n"
0 0 17 3 47 #";; three-between? number number list -> boolean"
0 0 65 29 1 #"\n"
0 0 17 3 79
(
 #";; true if all elements of the list are between the numbers. Recursi"
 #"ve version."
) 0 0 65 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"three-between?_r"
0 0 65 3 1 #" "
0 0 14 3 1 #"a"
0 0 65 3 1 #" "
0 0 14 3 1 #"b"
0 0 65 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 65 29 1 #"\n"
0 0 65 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 65 29 1 #"\n"
0 0 65 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 65 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 65 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 1 #"]"
0 0 65 29 1 #"\n"
0 0 65 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 65 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 2 #"))"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"between?"
0 0 65 3 1 #" "
0 0 14 3 1 #"a"
0 0 65 3 1 #" "
0 0 14 3 1 #"b"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 65 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 3 #"))]"
0 0 65 29 1 #"\n"
0 0 65 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"between?"
0 0 65 3 1 #" "
0 0 14 3 1 #"a"
0 0 65 3 1 #" "
0 0 14 3 1 #"b"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 65 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 2 #"))"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"three-between?_r"
0 0 65 3 1 #" "
0 0 14 3 1 #"a"
0 0 65 3 1 #" "
0 0 14 3 1 #"b"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 65 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 6 #")))]))"
0 0 65 29 1 #"\n"
0 0 65 29 1 #"\n"
0 0 17 3 30 #";; tests for three-between?_r:"
0 0 65 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 16 #"three-between?_r"
0 0 65 3 1 #" "
0 0 20 3 1 #"3"
0 0 65 3 1 #" "
0 0 20 3 1 #"6"
0 0 65 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 1 #"5"
0 0 65 3 1 #" "
0 0 20 3 1 #"4"
0 0 65 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 2 #"))"
0 0 65 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"three-between?_r"
0 0 65 3 1 #" "
0 0 20 3 1 #"3"
0 0 65 3 1 #" "
0 0 20 3 1 #"6"
0 0 65 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 4 #"()))"
0 0 65 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"three-between?_r"
0 0 65 3 1 #" "
0 0 20 3 1 #"3"
0 0 65 3 1 #" "
0 0 20 3 1 #"6"
0 0 65 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 1 #"5"
0 0 65 3 1 #" "
0 0 20 3 2 #"43"
0 0 65 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 3 #")))"
0 0 65 29 1 #"\n"
0 0 65 29 1 #"\n"
0 0 17 3 4 #";;;;"
0 0 65 29 1 #"\n"
0 0 17 3 14 #";;;; Problem 3"
0 0 65 29 1 #"\n"
0 0 17 3 4 #";;;;"
0 0 65 29 1 #"\n"
0 0 65 29 1 #"\n"
0 0 17 3 28 #";; signal : Number -> Number"
0 0 65 29 1 #"\n"
0 0 17 3 43 #";; returns -1 if num < 0, 1 if > 0, 0 if 0."
0 0 65 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"signal"
0 0 65 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 65 29 1 #"\n"
0 0 65 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 65 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 1 #">"
0 0 65 3 1 #" "
0 0 14 3 3 #"num"
0 0 65 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 65 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #"]"
0 0 65 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 1 #"<"
0 0 65 3 1 #" "
0 0 14 3 3 #"num"
0 0 65 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 65 3 1 #" "
0 0 20 3 2 #"-1"
0 0 22 3 1 #"]"
0 0 65 3 1 #" "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 65 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #"]))"
0 0 65 29 1 #"\n"
0 0 65 29 1 #"\n"
0 0 17 3 30 #";; positivity : List -> Number"
0 0 65 29 1 #"\n"
0 0 17 3 86
(
 #";; given a list of integer returns the number of positive elements -"
 #" negative elements"
) 0 0 65 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"positivity"
0 0 65 3 1 #" "
0 0 14 3 16 #"list-of-integers"
0 0 22 3 1 #")"
0 0 65 29 1 #"\n"
0 0 65 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldl"
0 0 65 3 1 #" "
0 0 14 3 1 #"+"
0 0 65 3 1 #" "
0 0 20 3 1 #"0"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 65 3 1 #" "
0 0 14 3 6 #"signal"
0 0 65 3 1 #" "
0 0 14 3 16 #"list-of-integers"
0 0 22 3 3 #")))"
0 0 65 29 1 #"\n"
0 0 65 29 1 #"\n"
0 0 17 3 9 #";; tests:"
0 0 65 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 1 #"="
0 0 65 3 1 #" "
0 0 20 3 1 #"2"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"positivity"
0 0 65 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 1 #"1"
0 0 65 3 1 #" "
0 0 20 3 2 #"-2"
0 0 65 3 2 #"  "
0 0 20 3 1 #"3"
0 0 65 3 1 #" "
0 0 20 3 2 #"-4"
0 0 65 3 2 #"  "
0 0 20 3 1 #"5"
0 0 65 3 1 #" "
0 0 20 3 2 #"-6"
0 0 65 3 2 #"  "
0 0 20 3 1 #"7"
0 0 65 3 2 #"  "
0 0 20 3 1 #"8"
0 0 22 3 3 #")))"
0 0 65 29 1 #"\n"
0 0 65 29 1 #"\n"
0 0 65 29 1 #"\n"
0 0 17 3 32 #";; positivity_r : List -> Number"
0 0 65 29 1 #"\n"
0 0 17 3 86
(
 #";; given a list of integer returns the number of positive elements -"
 #" negative elements"
) 0 0 65 29 1 #"\n"
0 0 17 3 21 #";; recursive edition."
0 0 65 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"positivity_r"
0 0 65 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 65 29 1 #"\n"
0 0 65 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 65 29 1 #"\n"
0 0 65 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 65 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 65 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #"]"
0 0 65 29 1 #"\n"
0 0 65 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"signal"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 65 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 2 #"))"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"positivity_r"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 65 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 6 #")))]))"
0 0 65 29 1 #"\n"
0 0 65 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 1 #"="
0 0 65 3 1 #" "
0 0 20 3 1 #"2"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"positivity_r"
0 0 65 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 1 #"1"
0 0 65 3 1 #" "
0 0 20 3 2 #"-2"
0 0 65 3 2 #"  "
0 0 20 3 1 #"3"
0 0 65 3 1 #" "
0 0 20 3 2 #"-4"
0 0 65 3 2 #"  "
0 0 20 3 1 #"5"
0 0 65 3 1 #" "
0 0 20 3 2 #"-6"
0 0 65 3 1 #" "
0 0 65 3 1 #" "
0 0 20 3 1 #"0"
0 0 65 3 1 #" "
0 0 20 3 1 #"7"
0 0 65 3 2 #"  "
0 0 20 3 1 #"8"
0 0 22 3 3 #")))"
0 0 65 29 1 #"\n"
0 0 65 29 1 #"\n"
0 0 17 3 4 #";;;;"
0 0 65 29 1 #"\n"
0 0 17 3 14 #";;;; Problem 4"
0 0 65 29 1 #"\n"
0 0 17 3 4 #";;;;"
0 0 65 29 1 #"\n"
0 0 65 29 1 #"\n"
0 0 17 3 32 #";; append-string* List -> String"
0 0 65 29 1 #"\n"
0 0 17 3 72
(
 #";; forms a string from the ones in a non-empty string list by append"
 #"ing."
) 0 0 65 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"append-string*"
0 0 65 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 65 29 1 #"\n"
0 0 65 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldr"
0 0 65 3 1 #" "
0 0 14 3 13 #"string-append"
0 0 65 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 65 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 2 #"))"
0 0 65 29 1 #"\n"
0 0 65 29 1 #"\n"
0 0 17 3 9 #";; tests:"
0 0 65 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 14 #"append-string*"
0 0 65 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 19 3 5 #"\"pat\""
0 0 65 3 1 #" "
0 0 19 3 6 #"\" eh \""
0 0 65 3 1 #" "
0 0 19 3 7 #"\"bimba\""
0 0 22 3 2 #"))"
0 0 65 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"string=?"
0 0 65 3 1 #" "
0 0 19 3 14 #"\"pat eh bimba\""
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"append-string*"
0 0 65 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 19 3 5 #"\"pat\""
0 0 65 3 1 #" "
0 0 19 3 6 #"\" eh \""
0 0 65 3 1 #" "
0 0 19 3 7 #"\"bimba\""
0 0 22 3 3 #")))"
0 0 65 29 1 #"\n"
0 0 65 29 1 #"\n"
0 0 17 3 34 #";; append-string*_r List -> String"
0 0 65 29 1 #"\n"
0 0 17 3 72
(
 #";; forms a string from the ones in a non-empty string list by append"
 #"ing."
) 0 0 65 29 1 #"\n"
0 0 17 3 13 #";; Recursive."
0 0 65 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"append-string*_r"
0 0 65 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 65 29 1 #"\n"
0 0 65 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 65 29 1 #"\n"
0 0 65 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 65 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 65 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 22 3 1 #"]"
0 0 65 29 1 #"\n"
0 0 65 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 65 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"append-string*_r"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 65 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 6 #")))]))"
0 0 65 29 1 #"\n"
0 0 65 29 1 #"\n"
0 0 17 3 9 #";; tests:"
0 0 65 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 16 #"append-string*_r"
0 0 65 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 19 3 5 #"\"pat\""
0 0 65 3 1 #" "
0 0 19 3 6 #"\" eh \""
0 0 65 3 1 #" "
0 0 19 3 7 #"\"bimba\""
0 0 22 3 2 #"))"
0 0 65 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 8 #"string=?"
0 0 65 3 1 #" "
0 0 19 3 14 #"\"pat eh bimba\""
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"append-string*_r"
0 0 65 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 19 3 5 #"\"pat\""
0 0 65 3 1 #" "
0 0 19 3 6 #"\" eh \""
0 0 65 3 1 #" "
0 0 19 3 7 #"\"bimba\""
0 0 22 3 3 #")))"
0 0 65 29 1 #"\n"
0 0 65 29 1 #"\n"
0 0 17 3 4 #";;;;"
0 0 65 29 1 #"\n"
0 0 17 3 14 #";;;; Problem 5"
0 0 65 29 1 #"\n"
0 0 17 3 4 #";;;;"
0 0 65 29 1 #"\n"
0 0 65 29 1 #"\n"
0 0 17 3 8 #";Develop"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 8 #"function"
0 0 17 3 1 #" "
0 0 17 3 9 #"order-toy"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 5 #"which"
0 0 17 3 1 #" "
0 0 17 3 8 #"consumes"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 6 #"symbol"
0 0 17 3 1 #" "
0 0 17 3 12 #"representing"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 3 #"toy"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 6 #"number"
0 0 17 3 1 #" "
0 0 17 3 12 #"representing"
0 0 17 3 1 #" "
0 0 17 3 3 #"how"
0 0 17 3 1 #" "
0 0 17 3 4 #"many"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 4 #"that"
0 0 17 3 1 #" "
0 0 17 3 10 #"particular"
0 0 17 3 1 #" "
0 0 17 3 3 #"toy"
0 0 17 3 1 #" "
0 0 17 3 3 #"you"
0 0 17 3 1 #" "
0 0 17 3 4 #"wish"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 4 #"have"
0 0 17 3 1 #" "
0 0 17 3 2 #"in"
0 0 17 11 1 #" "
0 0 17 3 6 #";stock"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 7 #"symbols"
0 0 17 3 1 #" "
0 0 17 3 12 #"representing"
0 0 17 3 1 #" "
0 0 17 3 2 #"an"
0 0 17 3 1 #" "
0 0 17 3 9 #"inventory"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 5 #"toys."
0 0 17 3 1 #" "
0 0 17 3 2 #"It"
0 0 17 3 1 #" "
0 0 17 3 8 #"produces"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 6 #"number"
0 0 17 3 1 #" "
0 0 17 3 6 #"copies"
0 0 17 3 1 #" "
0 0 17 3 4 #"that"
0 0 17 3 1 #" "
0 0 17 3 4 #"need"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 2 #"be"
0 0 17 3 1 #" "
0 0 17 3 8 #"ordered."
0 0 17 3 1 #" "
0 0 17 3 8 #"Consider"
0 0 17 3 1 #" "
0 0 17 3 5 #"using"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 11 1 #" "
0 0 17 3 17 #";how-many-symbols"
0 0 17 3 1 #" "
0 0 17 3 8 #"function"
0 0 17 3 1 #" "
0 0 17 3 4 #"from"
0 0 17 3 1 #" "
0 0 17 3 8 #"Exercise"
0 0 17 3 1 #" "
0 0 17 3 5 #"9.5.2"
0 0 17 3 1 #" "
0 0 17 3 2 #"as"
0 0 17 3 10 #" a helper."
0 0 65 29 1 #"\n"
0 0 65 29 1 #"\n"
0 0 17 3 44 #";; how-many-symbols : symbol, list -> number"
0 0 65 29 1 #"\n"
0 0 17 3 39 #";; counts the number of symbols on lst."
0 0 65 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 65 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"how-many-symbols"
0 0 65 3 1 #" "
0 0 14 3 4 #"symb"
0 0 65 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 65 29 1 #"\n"
0 0 65 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"symbol=?"
0 0 4 3 1 #" "
0 0 14 3 4 #"symb"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 3 #")))"
0 0 65 29 1 #"\n"
0 0 17 3 8 #";; test:"
0 0 65 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"how-many-symbols"
0 0 65 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"diabo"
0 0 65 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"dia"
0 0 65 3 1 #" "
0 0 14 3 2 #"oi"
0 0 65 3 1 #" "
0 0 14 3 5 #"diabo"
0 0 65 3 1 #" "
0 0 14 3 2 #"ia"
0 0 65 3 1 #" "
0 0 14 3 5 #"diabo"
0 0 65 3 1 #" "
0 0 14 3 3 #"uia"
0 0 65 3 1 #" "
0 0 14 3 5 #"diabo"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 41 #";; order-toy symbol number list -> number"
0 0 4 29 1 #"\n"
0 0 17 3 31 #";; how many toys need ordering."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"order-toy"
0 0 4 3 1 #" "
0 0 14 3 4 #"symb"
0 0 4 3 1 #" "
0 0 14 3 5 #"quant"
0 0 4 3 1 #" "
0 0 14 3 9 #"inventory"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 5 #"quant"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"how-many-symbols"
0 0 4 3 1 #" "
0 0 14 3 4 #"symb"
0 0 4 3 1 #" "
0 0 14 3 9 #"inventory"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 8 #";; test:"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"order-toy"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"diabo"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 3 #"dia"
0 0 4 3 1 #" "
0 0 14 3 2 #"oi"
0 0 4 3 1 #" "
0 0 14 3 5 #"diabo"
0 0 4 3 1 #" "
0 0 14 3 2 #"ia"
0 0 4 3 1 #" "
0 0 14 3 5 #"diabo"
0 0 4 3 1 #" "
0 0 14 3 3 #"uia"
0 0 4 3 1 #" "
0 0 14 3 5 #"diabo"
0 0 22 3 3 #")))"
0           0
